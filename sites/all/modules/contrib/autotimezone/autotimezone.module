<?php

/**
 * @file
 * Automatically sets user time zones based on the value from the users browser
 * using Javascript. The javascript compares the local browser time zone value
 * and the time zone value drupal has stored for that user. If the two values
 * are different it will send a page request index.php?q=autotimezone/*value*
 * where *value* is the new timezone value.
 */

/**
 * Implementation of hook_menu().
 */
function autotimezone_menu() {
  $items['admin/settings/autotimezone'] = array(
    'title' => 'Auto Time Zone',
    'description' => 'Automatically updates user time zones using JavaScript.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autotimezone_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['autotimezone'] = array(
    'page callback' => 'autotimezone_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_init().
 */
function autotimezone_init() {
  if (!function_exists('throttle_status') || !throttle_status()) { // Don't do anything if the throttle is active.
    global $user;
    if ($user->uid != 0 || variable_get('autotimezone_update_guest', FALSE)) { // If the user is a guest, only continue if guest checking is on.
      // We need to check if the user is a guest and then use the guest session variable.
      if ($user->uid == 0) {
        if (!$_SESSION['timezone']) {
          $_SESSION['timezone'] = variable_get('date_default_timezone', 0);
        }
        $timezone = $_SESSION['timezone'] / -60;
      }
      else { // If user is not guest.
        $timezone = $user->timezone / -60; // Convert offset to minutes.
      }
      // This is the Javascript that will send the timezone back to the server if it needs to be updated.
      $javascript = "\nvar now = new Date();";
      $javascript .= "\nvar offset = now.getTimezoneOffset();";
      $javascript .= "\n".'if (!(offset == '. drupal_to_js($timezone) .')) {$(document).ready(function(){$.get('. drupal_to_js(url('autotimezone/', array('absolute' => TRUE))) .' + offset);})}';
      drupal_add_js($javascript, 'inline');
    }
  }
}

/**
 * Menu callback
 *
 * @return
 *   array of form content.
 */
function autotimezone_admin_settings() {
  variable_set('configurable_timezones', TRUE); // This variable must be true for the format_date function to use the individual users time zones.
  $form['guest'] = array(
    '#type' => 'fieldset',
    '#title' => t('Guest user options'),
    '#description' => t('If you do not know why you might need this feature, keep it turned off.'),
  );
  $form['guest']['autotimezone_update_guest'] = array(
    '#type' => 'radios',
    '#title' => t('Update guest user session variables'),
    '#default_value' => variable_get('autotimezone_update_guest', FALSE),
    '#options' => array('1' => t('On'), '0' => t('Off')),
    '#description' => t('This module can set a session variable named $_SESSION[\'timezone\'] for anonymous users, which is in the form of seconds from GMT. This feature is of no use unless extra code has been added to your site to take advantage of it.'),
  );
  return system_settings_form($form);
}

/**
 * Menu callback for /autotimezone/xxx
 * Takes the data sent from the Javascript and updates the timezone.
 */
function autotimezone_page($offset) {
  global $user;
  $offset = intval($offset) * -60; // Convert offset to units of seconds from GMT.
  $_SESSION['timezone'] = $offset; // Update session variable.
  // If needed update user object with new timezone value.
  if ($user->uid != 0 and $offset != $user->timezone) {
    watchdog('user', 'Time zone updated from %old to %new.', array('%old' => $user->timezone / 3600, '%new' => $offset / 3600));
    user_save($user, array('timezone' => $offset));
  }
}
